# Suggestions from StackOverflow:
# 1. functions and aliasses should go in ~/.bashrc and ~/.bash_profile or ~/.profile should source ~/.bashrc
# 2. sourcing one from the other makes life much easier. For safety, I have my .bash_profile check first, like this: if [ -f ~/.bashrc ]; then . ~/.bashrc; fi

# imported from sample file
# From http://hayne.net/MacDev/Bash/aliases.bash

#echo Sourcing .aliases

#-----------------
# Directory / list
#-----------------

if command -v eza &>/dev/null; then
    alias la='eza --all --qll'
    alias ll='eza --long --all --all --octal-permissions --icons'
    alias lt='eza --long --all --all --sort=time'
else
    alias la='ls -aO'
    alias ll='ls -aOlh'
    alias lt='ls -lt'
fi

# list recrusive -- this requires quoted arquments
lr () { for pattern in "$@"; do find . -name "$pattern" -type f ; done ; }

# ls for resources MacOS fork
lsr () { ls -lh "$@"/..namedfork/rsrc ; }

#--------------
# Folder / Path
#--------------

alias md='mkdir -p'
alias showpath='echo "$PATH" | tr ":" "\n" | nl'

#--------
# Aliases
#--------

# showa: to remind yourself of an alias (given some part of it)
alias showa='whence -f'

# sourcea: to source this file (to make changes active after editing)
alias sourcea='source ~/.aliases'

alias emacs='/Applications/Emacs.app/Contents/MacOS/Emacs.sh'

#----------------
# Command history
#----------------

if command -v atuin &>/dev/null; then
    alias h='atuin history list --session'
    alias hh='atuin history list'
    alias hgrep='atuin search'
else
    alias h='history 1'
    alias hh='history 1 | less' # history (paged)
    alias hgrep='history 1 | grep -i'  # grep through command history
fi

#-----------
# Searching:
#-----------
# ff:  to find a file under the current directory
ff () { find . -name "$@" ; }

# ffs: to find a file whose name starts with a given string
ffs () { find . -name "$@"'*' ; }

# ffe: to find a file whose name ends with a given string
ffe () { find . -name '*'"$@" ; }

# -----------
# Development
# -----------

alias killdoc='killall -KILL Dock'

node-20() { brew unlink node ; brew unlink node@22 ; brew unlink node; brew link --overwrite node@20 ; node --version ; }
node-22() { brew unlink node ; brew unlink node@20 ; brew unlink node; brew link --overwrite node@22 ; node --version ; }
node-latest() { brew unlink node@20 ; brew unlink node@22 ; brew reinstall node ; node --version ; }

alias python=python3
alias py=python3

python-311() { alias python3 >/dev/null 2>&1 || if [[ $(uname -m) == 'arm64' ]]; then
    alias python3=/opt/homebrew/bin/python3.11 ; export npm_config_python=/opt/homebrew/bin/python3.11
else
    alias python3=/usr/local/bin/python3.11 ; export npm_config_python=/usr/local/bin/python3.11
fi; eval 'python3 --version' ; }

python-312() { alias python3 >/dev/null 2>&1 && unalias python3 ; unset npm_config_python ; eval 'python3 --version' ; }

alias ghcp='gh copilot suggest'

# ------------------------
# Mac OS & iOS Development
# ------------------------

# Change Mac terminal name
term() { echo -n -e "\033]0;$@\007" ; }

# Objective-C / NIB searches
gr() { grep --line-number --recursive --include=*.{m,h,xib} "$1"; }
gri() { grep --line-number --recursive --ignore-case --include=*.{m,h,xib} "$1"; }

xcode ()  { open /Applications/Xcode.app "$@" ; }
sim () { open /Applications/Xcode.app/Contents/Developer/Applications/Simulator.app ; }

# --------------------
# KDiff diff and merge
# --------------------

kdiff3() { open "/Applications/kdiff3.app" "$@" ; }

# kdiff two files
kd ()  { open -a kdiff3 --args "$PWD/$1" "$PWD/$2"; }

# kdiff merge two files to using a .merged output file
km () { open -a kdiff3 --args "$PWD/$1" "$PWD/$2" --output "$(PWD)/$1.merged"; }

# kdiff merge two files in place (overwrites first file)
kdm () { open -a kdiff3 --args "$PWD/$1" "$PWD/$2" --output "$(PWD)/$1"; }

# -------------
# Convert Video
# -------------

convert-video() {
  video_name="${1%.*}"
  source_file="${1}"
  destination_file="${video_name}".mp4

  # Check if source_file exists
  if [ ! -f "${source_file}" ]; then
     echo "Error: Source file '${source_file}' does not exist."
     exit 1
   fi

   echo Converting "${source_file}" to "${destination_file}"
   ffmpeg -i "${source_file}" -vcodec h264 -acodec aac "${destination_file}"
}

# ------
# docker
# ------

# Source Docker functions from external library
if test -f ~/mac-config/docker.shlib; then 
    source ~/mac-config/docker.shlib
fi

# Source APK functions from external library
if test -f ~/GoldenImageTechCoP/cookbook/apk-search/apk-functions.shlib; then 
    source ~/GoldenImageTechCoP/cookbook/apk-search/apk-functions.shlib
fi

# Source Encryption functions from external library
if test -f ~/mac-config/encryption.shlib; then 
    source ~/mac-config/encryption.shlib
fi

# ---------
# Optum/UHG
# ---------

# microproduct template cli
alias mpt='npx @optum-rx-platform/cli@latest'

if test -f ~/team/docker/scripts/prisma.sh; then alias prisma='~/team/docker/scripts/prisma.sh'; fi
if test -f ~/team/docker/scripts/xray.sh; then alias xray='~/team/docker/scripts/xray.sh'; fi
if test -f ~/team/docker/scripts/container-extract.sh; then alias container-extract='~/team/docker/scripts/container-extract.sh'; fi
if test -f ~/team/docker/scripts/image-extract.sh; then alias image-extract='~/team/docker/scripts/image-extract.sh'; fi

if test -f ~/team/docker/sbom-compare/sbom-diff.sh; then alias sbom-diff='~/team/docker/sbom-compare/sbom-diff.sh'; fi
if test -f ~/team/docker/sbom-compare/sbom-analyze.sh; then alias sbom-analyze='~/team/docker/sbom-compare/sbom-analyze.sh'; fi

if test -f ~/team/scripts/hcc-auth.sh; then alias hcc-auth='~/team/scripts/hcc-auth.sh'; fi
# if test -f ~/team/scripts/ghcp-usage.sh; then alias ghcp='pushd ~/team/scripts; ./ghcp-usage.sh; popd'; fi

if test -f ~/docker/update-golden-images.sh; then alias update-golden-images='~/docker/update-golden-images.sh'; fi
